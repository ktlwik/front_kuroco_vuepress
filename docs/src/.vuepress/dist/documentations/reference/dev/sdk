<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>KurocoSDK | Kuroco</title>
    <meta name="generator" content="VuePress 1.8.2">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@500;600&amp;family=Inter:wght@500;600;700&amp;family=Karla&amp;display=swap">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="/files/js/front/user/lib/lib.js"></script>
    <script src="/files/js/front/user/common.js"></script>
    <meta name="description" content="Kuroco website">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <link rel="preload" href="/assets/css/0.styles.bc74f8df.css" as="style"><link rel="preload" href="/assets/js/app.6e77232a.js" as="script"><link rel="preload" href="/assets/js/16.32bd92ae.js" as="script"><link rel="preload" href="/assets/js/1.87fd4beb.js" as="script"><link rel="preload" href="/assets/js/115.d40fb46c.js" as="script"><link rel="prefetch" href="/assets/js/10.436f3f1f.js"><link rel="prefetch" href="/assets/js/100.bd680f2e.js"><link rel="prefetch" href="/assets/js/101.3b3eb50a.js"><link rel="prefetch" href="/assets/js/102.524ddb4e.js"><link rel="prefetch" href="/assets/js/103.444af85c.js"><link rel="prefetch" href="/assets/js/104.56e7f8f9.js"><link rel="prefetch" href="/assets/js/105.a7ecd6f3.js"><link rel="prefetch" href="/assets/js/106.0f3abd38.js"><link rel="prefetch" href="/assets/js/107.354137e5.js"><link rel="prefetch" href="/assets/js/108.8f77319c.js"><link rel="prefetch" href="/assets/js/109.3a3bbde1.js"><link rel="prefetch" href="/assets/js/11.1b2a3e6b.js"><link rel="prefetch" href="/assets/js/110.4dcb15c0.js"><link rel="prefetch" href="/assets/js/111.7ab747ca.js"><link rel="prefetch" href="/assets/js/112.ab1b565b.js"><link rel="prefetch" href="/assets/js/113.3635af52.js"><link rel="prefetch" href="/assets/js/114.e7d3f71e.js"><link rel="prefetch" href="/assets/js/116.c6336449.js"><link rel="prefetch" href="/assets/js/117.a8d146d8.js"><link rel="prefetch" href="/assets/js/118.0130fcf2.js"><link rel="prefetch" href="/assets/js/119.2286c5e2.js"><link rel="prefetch" href="/assets/js/12.6199b489.js"><link rel="prefetch" href="/assets/js/120.877ccbd5.js"><link rel="prefetch" href="/assets/js/121.375c8f6a.js"><link rel="prefetch" href="/assets/js/122.c3e20e9e.js"><link rel="prefetch" href="/assets/js/123.fe5f5455.js"><link rel="prefetch" href="/assets/js/124.2889b00e.js"><link rel="prefetch" href="/assets/js/125.9b408f8f.js"><link rel="prefetch" href="/assets/js/126.e4c7d72b.js"><link rel="prefetch" href="/assets/js/127.6c84d28a.js"><link rel="prefetch" href="/assets/js/128.35baf446.js"><link rel="prefetch" href="/assets/js/129.344ca907.js"><link rel="prefetch" href="/assets/js/13.33770ada.js"><link rel="prefetch" href="/assets/js/14.30ef1bcd.js"><link rel="prefetch" href="/assets/js/15.509a5726.js"><link rel="prefetch" href="/assets/js/17.aebab0ce.js"><link rel="prefetch" href="/assets/js/18.145d5e23.js"><link rel="prefetch" href="/assets/js/19.216f5317.js"><link rel="prefetch" href="/assets/js/20.f2802fc0.js"><link rel="prefetch" href="/assets/js/21.9bcd9b4e.js"><link rel="prefetch" href="/assets/js/22.0336d00b.js"><link rel="prefetch" href="/assets/js/23.1145b70f.js"><link rel="prefetch" href="/assets/js/24.3edf7da3.js"><link rel="prefetch" href="/assets/js/25.9adbcee7.js"><link rel="prefetch" href="/assets/js/26.79cc83a1.js"><link rel="prefetch" href="/assets/js/27.f3f0a6d7.js"><link rel="prefetch" href="/assets/js/28.6742b534.js"><link rel="prefetch" href="/assets/js/29.25b5fa88.js"><link rel="prefetch" href="/assets/js/30.93fe466c.js"><link rel="prefetch" href="/assets/js/31.0d65cce9.js"><link rel="prefetch" href="/assets/js/32.c989c380.js"><link rel="prefetch" href="/assets/js/33.2b4be8ab.js"><link rel="prefetch" href="/assets/js/34.d58067d1.js"><link rel="prefetch" href="/assets/js/35.e07913f6.js"><link rel="prefetch" href="/assets/js/36.e19caec1.js"><link rel="prefetch" href="/assets/js/37.065a48c0.js"><link rel="prefetch" href="/assets/js/38.a6773681.js"><link rel="prefetch" href="/assets/js/39.5cbdd240.js"><link rel="prefetch" href="/assets/js/4.50c513f5.js"><link rel="prefetch" href="/assets/js/40.2a63d294.js"><link rel="prefetch" href="/assets/js/41.f7b3dedf.js"><link rel="prefetch" href="/assets/js/42.8f956845.js"><link rel="prefetch" href="/assets/js/43.5bb04338.js"><link rel="prefetch" href="/assets/js/44.82545433.js"><link rel="prefetch" href="/assets/js/45.3e00a1ba.js"><link rel="prefetch" href="/assets/js/46.8c24641b.js"><link rel="prefetch" href="/assets/js/47.e9a169bb.js"><link rel="prefetch" href="/assets/js/48.3e7441c1.js"><link rel="prefetch" href="/assets/js/49.4ffcfb01.js"><link rel="prefetch" href="/assets/js/5.c46b70ae.js"><link rel="prefetch" href="/assets/js/50.86a2c57b.js"><link rel="prefetch" href="/assets/js/51.a7f784c6.js"><link rel="prefetch" href="/assets/js/52.c384310e.js"><link rel="prefetch" href="/assets/js/53.02e3e257.js"><link rel="prefetch" href="/assets/js/54.331eebdb.js"><link rel="prefetch" href="/assets/js/55.90bb6ce7.js"><link rel="prefetch" href="/assets/js/56.56df12cb.js"><link rel="prefetch" href="/assets/js/57.412e41d1.js"><link rel="prefetch" href="/assets/js/58.32b1271a.js"><link rel="prefetch" href="/assets/js/59.4ada8db9.js"><link rel="prefetch" href="/assets/js/6.b3d4a0d4.js"><link rel="prefetch" href="/assets/js/60.2c67e4bf.js"><link rel="prefetch" href="/assets/js/61.8a6e60b3.js"><link rel="prefetch" href="/assets/js/62.1a6987b6.js"><link rel="prefetch" href="/assets/js/63.197cb65a.js"><link rel="prefetch" href="/assets/js/64.8eafec54.js"><link rel="prefetch" href="/assets/js/65.2dafcacf.js"><link rel="prefetch" href="/assets/js/66.4e350a33.js"><link rel="prefetch" href="/assets/js/67.4ce8e76f.js"><link rel="prefetch" href="/assets/js/68.ecfdefcb.js"><link rel="prefetch" href="/assets/js/69.3dfefee6.js"><link rel="prefetch" href="/assets/js/7.f9826f27.js"><link rel="prefetch" href="/assets/js/70.0eed8628.js"><link rel="prefetch" href="/assets/js/71.188730b5.js"><link rel="prefetch" href="/assets/js/72.6f64603a.js"><link rel="prefetch" href="/assets/js/73.199086aa.js"><link rel="prefetch" href="/assets/js/74.75c81a41.js"><link rel="prefetch" href="/assets/js/75.cf77afeb.js"><link rel="prefetch" href="/assets/js/76.5749f86e.js"><link rel="prefetch" href="/assets/js/77.04058d22.js"><link rel="prefetch" href="/assets/js/78.1d62c264.js"><link rel="prefetch" href="/assets/js/79.aa2a8b62.js"><link rel="prefetch" href="/assets/js/8.cbbf8c2b.js"><link rel="prefetch" href="/assets/js/80.90088726.js"><link rel="prefetch" href="/assets/js/81.9eddf609.js"><link rel="prefetch" href="/assets/js/82.b8d3f761.js"><link rel="prefetch" href="/assets/js/83.cdffc36c.js"><link rel="prefetch" href="/assets/js/84.fd885819.js"><link rel="prefetch" href="/assets/js/85.b5f5fe37.js"><link rel="prefetch" href="/assets/js/86.7bb066f9.js"><link rel="prefetch" href="/assets/js/87.d040e874.js"><link rel="prefetch" href="/assets/js/88.430459ff.js"><link rel="prefetch" href="/assets/js/89.c5fb65af.js"><link rel="prefetch" href="/assets/js/9.75b8427c.js"><link rel="prefetch" href="/assets/js/90.8bc7a7f0.js"><link rel="prefetch" href="/assets/js/91.9bef9de5.js"><link rel="prefetch" href="/assets/js/92.3f9538c3.js"><link rel="prefetch" href="/assets/js/93.f52585ae.js"><link rel="prefetch" href="/assets/js/94.75e813b3.js"><link rel="prefetch" href="/assets/js/95.9f27301c.js"><link rel="prefetch" href="/assets/js/96.3f0f4358.js"><link rel="prefetch" href="/assets/js/97.4a5c0b34.js"><link rel="prefetch" href="/assets/js/98.231ce949.js"><link rel="prefetch" href="/assets/js/99.88956e3b.js"><link rel="prefetch" href="/assets/js/vendors~docsearch.17b540a7.js">
    <link rel="stylesheet" href="/assets/css/0.styles.bc74f8df.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div id="wrapper"><header class="header-docs"><div class="header-docs-container"><div class="header-docs-logo"><a href="/documentations" class="header-docs-logo__link router-link-active">Kuroco</a></div> <a href="/" class="header-docs-back-link router-link-active">Back to website</a> <div class="header-docs-sub-container"><form id="search-form" class="algolia-search-wrapper search-box"><input id="algolia-search-input" class="search-query"></form> <nav class="header-docs-nav"><ul class="header-docs-nav__list"><li class="header-docs-nav__list-item"><a href="/documentations/support" class="header-docs-nav__link">サポート</a></li> <li class="header-docs-nav__list-item header-docs-nav__list-item--opa"><span class="header-docs-nav__link"><label class="header-toggle-txt"><input type="checkbox" class="header-toggle-txt__input js-color-toggle"> <span class="header-toggle-txt__txt"></span></label></span></li></ul></nav></div></div></header> <div class="contents"><div class="column"><aside class="sidebar"><div class="sidebar__container"><div class="sidebar__head"><span class="sidebar__ttl">ドキュメント</span></div> <div class="sidebar__body"><ul class="sidebar__list"><li class="sidebar__list-item"><a href="/documentations/" class="sidebar__list-link router-link-active">ホーム</a></li><li class="sidebar__list-item"><a href="/documentations/about.html" class="sidebar__list-link">Kurocoについて</a></li><li class="sidebar__list-item"><a href="/documentations/management.html" class="sidebar__list-link">管理画面マニュアル</a></li><li class="sidebar__list-item"><a href="/documentations/api.html" class="sidebar__list-link">API</a></li><li class="sidebar__list-item"><a href="/documentations/reference.html" class="sidebar__list-link">リファレンス</a></li><li class="sidebar__list-item"><a href="/documentations/tools.html" class="sidebar__list-link">ツール</a></li><li class="sidebar__list-item"><a href="/documentations/faq.html" class="sidebar__list-link">FAQ</a></li></ul></div></div></aside> <div class="main"><div class="wysiwyg"><div class="c-chapter-docs__head"><h1 class="c-ttl c-ttl--docs">KurocoSDK</h1></div> <div class="content__default"><blockquote><p><strong>This document is copy of GitHub repository.</strong> <strong>Pleach check out the 🔗<a href="https://github.com/diverta/kuroco-sdk" target="_blank" rel="noopener noreferrer">site<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></strong></p></blockquote> <h1 id="kurocosdk"><a href="#kurocosdk" class="header-anchor">#</a> KurocoSDK</h1> <blockquote><p>NodeJS library that generates Typescript or Javascript clients based on the OpenAPI specification for Kuroco.</p></blockquote> <p>If you are not familiar with Kuroco yet, please take a look here first : <a href="https://kuroco.app/" target="_blank" rel="noopener noreferrer">kuroco.app<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p>Kuroco SDK project aims to generate a dynamic frontend sourcecode (henceforth referred to as kuroco lib) (currently in Typescript or Javascript) wrapping the API of your current Kuroco project as a convenient collection of methods, allowing an easy usage of your Kuroco API through data definition objects, removing parts of technical burden and more, thus facilitating the usage of the API to allow you to focus on the business logic of your frontend application.</p> <p>Please note that the generated code is dynamically assembled using the current Kuroco configuration &amp; API definition. Were this configuration to change (API definitions, topics groups configuration, etc), you are required to regenerate the SDK for it to adjust to your latest configuration.</p> <h3 id="acknowledgments"><a href="#acknowledgments" class="header-anchor">#</a> ❤️ Acknowledgments</h3> <p>This project is powered by an adaptation of <a href="https://github.com/ferdikoomen/openapi-typescript-codegen" target="_blank" rel="noopener noreferrer">openapi-typescript-codegen<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, many thanks to the author <a href="https://github.com/ferdikoomen" target="_blank" rel="noopener noreferrer">Ferdi Koomen<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> for his work !</p> <hr> <h2 id="installation"><a href="#installation" class="header-anchor">#</a> Installation</h2> <ul><li><p>Install globally :<br> <code>npm i -g kuroco-sdk &amp;&amp; kuroco -V</code></p></li> <li><p>Or install locally in your current project:<br> <code>npm install -D kuroco-sdk &amp;&amp; npx kuroco -V</code></p></li></ul> <h3 id="pre-requisities"><a href="#pre-requisities" class="header-anchor">#</a> Pre-requisities</h3> <p><strong>Node 12.13.1 or higher</strong><br>
http://nodejs.org/</p> <h3 id="configuration"><a href="#configuration" class="header-anchor">#</a> Configuration</h3> <p>First step is to configure the project.
We recommend to do so by running <code>kuroco init</code>, which will walk you through an interactive prompt to create the configuration file.
Alternatively, it can be done by manually by adding <code>kuroco.config.json</code> file in your project's root folder.</p> <p>The file will contain a JSON configuration object like below :</p> <div class="language- extra-class"><pre class="language-text"><code>{
    &quot;sdk_key&quot;: &quot;c9cdfd46b60bb0a34ba5c2c153ffad3f&quot;,          // Kuroco authorization token for the SDK
    &quot;management_url&quot;: &quot;https://kuroco-dev-mng.r-cms.jp&quot;     // Your Kuroco management site's url
    ... // other configurations
}
</code></pre></div><h4 id="where-can-i-get-my-sdk-key"><a href="#where-can-i-get-my-sdk-key" class="header-anchor">#</a> ❓ Where can I get my SDK key ?</h4> <p>The <code>sdk_key</code> can be found on the API List page of your Kuroco management interface.</p> <hr> <h2 id="kuroco-sdk-quickstart"><a href="#kuroco-sdk-quickstart" class="header-anchor">#</a> Kuroco SDK quickstart</h2> <div class="language- extra-class"><pre class="language-text"><code>npx kuroco init &amp;&amp; \
npx kuroco pull &amp;&amp; \
npx kuroco generate
</code></pre></div><p>If you don't have Kuroco and just want to try codegeneration,<br>
Run the following command in this repository:</p> <div class="language- extra-class"><pre class="language-text"><code>npm i kuroco-sdk -D &amp;&amp; npx kuroco generate -i node_modules/kuroco-sdk/example/openapi.json
</code></pre></div><hr> <h2 id="features"><a href="#features" class="header-anchor">#</a> Features</h2> <h3 id="initialization"><a href="#initialization" class="header-anchor">#</a> Initialization</h3> <p><code>kuroco init</code> interactive prompt for easy configuration</p> <h3 id="pulling-openapi-definitions-from-kuroco"><a href="#pulling-openapi-definitions-from-kuroco" class="header-anchor">#</a> Pulling OpenApi definitions from Kuroco</h3> <p><code>kuroco pull</code> can pull (download &amp; write) the latest OpenApi definitions from Kuroco.</p> <h3 id="generating-ts-js-kuroco-library"><a href="#generating-ts-js-kuroco-library" class="header-anchor">#</a> Generating TS/JS kuroco library</h3> <p><code>kuroco generate</code> builds the TypeScript/JavaScript kuroco lib based on the pulled OpenApi definition that you can integrate to your app to interface with Kuroco API
Language may be selected using <code>-l</code> (or <code>--language</code>) option (default being typescript).</p> <div class="language- extra-class"><pre class="language-text"><code>kuroco generate -l javascript
</code></pre></div><blockquote><p>If your project is using Typescript and you want to generate kuroco lib outside of your project's src folder, you may declare your custom directory path using <code>typeRoots</code> property in <code>tsconfig.json</code> :
<code>&quot;typeRoots&quot;: [&quot;./generated&quot;],</code></p></blockquote> <h3 id="integrating-the-generated-kuroco-library-to-your-application"><a href="#integrating-the-generated-kuroco-library-to-your-application" class="header-anchor">#</a> Integrating the generated kuroco library to your application</h3> <p>The recommended way to import kuroco library is through ESModule :</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Auth<span class="token punctuation">,</span> TopicsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kuroco&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/** Fetch Topics data on login */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTopicsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    requestBody<span class="token operator">:</span> <span class="token punctuation">{</span> email<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">'qwer1234'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> TopicsService<span class="token punctuation">.</span><span class="token function">getTopicsServiceRcmsApi1Topics1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>There are 2 ways to generate and install kuroco lib :</p> <ol><li>run <code>kuroco generate --lib -o outputDir</code> and <code>install outputDir --save</code>,<br>
import them with <code>import Kuroco from 'kuroco'</code> in your code.</li> <li>run <code>kuroco generate -o in/your/src/outputDir</code><br>
and just import them with <code>import Kuroco from 'in/your/src/outputDir'</code> in your code.
The first variant will export its own <code>package.json</code> into the output directory, which can be used to bootstrap your application's npm project
The second variant exports the library as TypeScript or Javascript(commonjs) modules.</li></ol> <p>Alternatively, if your application is <strong>NOT</strong> an npm project (plain Javascript loaded by the browser), there is an option to generate the library as an executable js dependency bundled as <code>index.js</code>.
The option is <code>--standalone</code>, so in this case you can use <code>kuroco generate --language javascript --standalone</code>.<br>
After that, simply load the generated library using the basic way in your HTML header :</p> <div class="language-html extra-class"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>kuroco-standalone/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
            <span class="token keyword">const</span> <span class="token punctuation">{</span> Auth<span class="token punctuation">,</span> TopicsService <span class="token punctuation">}</span> <span class="token operator">=</span> Kuroco<span class="token punctuation">;</span>

            <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTopicsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">await</span> Auth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    requestBody<span class="token operator">:</span> <span class="token punctuation">{</span> email<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">'qwer1234'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">await</span> TopicsService<span class="token punctuation">.</span><span class="token function">getTopicsServiceRcmsApi1Topics1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token function">getTopicsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>You can checkout full list of options with <code>kuroco -h</code> or <code>kuroco generate -h</code>.<br>
For more examples, please check out <a href="https://github.com/diverta/kuroco_sdk_examples" target="_blank" rel="noopener noreferrer">official code samples<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> supplied with Kuroco.</p> <h4 id="authentication-handling"><a href="#authentication-handling" class="header-anchor">#</a> Authentication handling</h4> <p>Due to multiple authentication patterns supported by Kuroco - mainly that each Kuroco API can be configured to be based either on Authentication header token or cookies, and at the same time be public or private - there is a technical burden of properly calling Auth API. To handle the implementation details for you, we provide an <code>Auth</code> module that covers all authentication patterns, even if you have defined multiple APIs having different authentication patterns.</p> <p>So, if you have properly setup Authentication APIs in your Kuroco management interface, we recommend using the generated <code>Auth</code> module instead of manually invoking authentication API</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'kuroco'</span><span class="token punctuation">;</span>
Auth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span> requestBody<span class="token operator">:</span> <span class="token punctuation">{</span> email<span class="token operator">:</span> <span class="token string">'test@example.com'</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">'PASSWORD'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre></div><p><code>Auth.login()</code> wraps the login logic depending on whether the API uses token (in which case it proceeds to chain login API -&gt; token API calls to fetch your authentified token) or cookies (only login API is called in that case)
on the other hand executes only login if not.</p> <h5 id="handling-unauthorized-requests-and-expired-sessions-tokens"><a href="#handling-unauthorized-requests-and-expired-sessions-tokens" class="header-anchor">#</a> Handling unauthorized requests and expired sessions (tokens)</h5> <p>You should create an error handler for unauthorized requests in order to implement custom processing when the token expires (redirect to login page for example). The default handler ignores these errors, which is not ideal for a real world application.</p> <p>Please note that in case when your API uses tokens, and your token API has <code>use_refresh_token</code> setting set to true, Auth module is able to detect access token expiration error and automatically issue a request for a new token using the stored refresh token. However if refresh token is also expired, the retry call will be unauthorized as well - the handler is required anyways.</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'kuroco'</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * Auth.onErrorHandler: (result: Result) =&gt; Result = result =&gt; result
 */</span>
Auth<span class="token punctuation">.</span><span class="token function-variable function">onErrorHandler</span> <span class="token operator">=</span> result <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="file-uploading"><a href="#file-uploading" class="header-anchor">#</a> File uploading</h4> <p>Kuroco may be connected to Firebase Storage to enable file uploading. This feature requires you to configure Firebase credentials &amp; app on Kuroco management interface prior to generating kuroco library.</p> <p>We provide an Uploader (<code>UploaderFactory</code>) component to facilitate file uploading.</p> <p>Here is an example of how we use it in our component :</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> UploaderFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'kuroco'</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
    <span class="token function">onChangeInputFile</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newFile <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> File<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>uploader<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">mountUploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uploader <span class="token operator">=</span> <span class="token keyword">await</span> UploaderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'could not creat uploader for:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><blockquote><p>File uploading is only possible for authenticated and logged in users</p></blockquote> <h4 id="generating-api-information"><a href="#generating-api-information" class="header-anchor">#</a> Generating API information</h4> <p>We provide a way to optionnally generate additional (meta) information about endpoints. This may be useful, for example, for e2e testing.</p> <div class="language- extra-class"><pre class="language-text"><code>kuroco generate -exportApiInformations
</code></pre></div><div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">const</span> AuthenticationalGetResponseExamples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ApiInfos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>info <span class="token operator">=&gt;</span> info<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">'AuthenticationService'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>info <span class="token operator">=&gt;</span> info<span class="token punctuation">.</span>httpMethod <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> info <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> info<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">{</span> requestBody<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AuthenticationalGetResponseExamples<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="using-firebaseapp"><a href="#using-firebaseapp" class="header-anchor">#</a> Using FirebaseApp</h4> <p>The KurocoSDK includes the FirebaseSDK.<br>
You can use Firebase application instance as needed.<br>
Here is an example of using thier analytics feature in an our implementation:</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>

<span class="token comment">/** apply analytics */</span>
<span class="token keyword">import</span> <span class="token string">'firebase/analytics'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> firebaseApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'kuroco'</span><span class="token punctuation">;</span> <span class="token comment">// instance of firebase already initialized.</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
 firebaseApp<span class="token punctuation">.</span><span class="token function">analytics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div></div></div></div></div></div> <footer class="footer"><div class="footer-container"><div class="footer-top"><p class="footer-logo"><a href="/" class="footer-logo__link router-link-active">Kuroco</a></p> <div class="footer-nav-wrap"><section class="footer-nav-sec"><h2 class="footer-nav-sec__ttl">株式会社ディバータ</h2> <div class="footer-nav-sec__body"><p class="footer-nav-sec__txt">162 - 0823 <br>東京都新宿区神楽河岸１－１<br>セントラルプラザ６F</p></div></section> <section class="footer-nav-sec"><h2 class="footer-nav-sec__ttl">サイトマップ</h2> <div class="footer-nav-sec__body"><nav class="footer-nav"><ul class="footer-nav__list"><li class="footer-nav__list-item"><a href="/documentations" class="footer-nav__link router-link-active">ドキュメント</a></li> <li class="footer-nav__list-item"><a href="/documentations/support" class="footer-nav__link">サポート</a></li> <li class="footer-nav__list-item"><a href="/about" class="footer-nav__link">Kurocoについて</a></li></ul></nav></div></section> <section class="footer-nav-sec"><h2 class="footer-nav-sec__ttl">会社情報</h2> <div class="footer-nav-sec__body"><nav class="footer-nav"><ul class="footer-nav__list"><li class="footer-nav__list-item"><a href="/contact" class="footer-nav__link">お問い合わせ</a></li> <li class="footer-nav__list-item"><a href="/tos" class="footer-nav__link">利用規約</a></li> <li class="footer-nav__list-item"><a href="/documentations/reference/dev/https://www.diverta.co.jp/privacy/" class="footer-nav__link">プライバシーポリシー</a></li></ul></nav></div></section></div></div> <div class="footer-bottom"><p class="footer-catch"><span class="footer-catch__txt">Made in Japan with love</span><span class="footer-catch__ico"><img src="/files/user/img/common/ico/ico_heart_1-2.svg" alt></span></p> <div class="footer-copyright"><small class="footer-copyright__txt">Copyright © 2021 Diverta Inc. All rights reserved.</small></div></div></div></footer></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.6e77232a.js" defer></script><script src="/assets/js/16.32bd92ae.js" defer></script><script src="/assets/js/1.87fd4beb.js" defer></script><script src="/assets/js/115.d40fb46c.js" defer></script>
  </body>
</html>
